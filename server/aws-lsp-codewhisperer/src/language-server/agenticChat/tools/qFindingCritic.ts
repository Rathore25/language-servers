/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import { z } from 'zod'
import { CodeWhispererServiceToken } from '../../../shared/codeWhispererService'
import { StreamingClientServiceToken } from '../../../shared/streamingClientService'
import { Features } from '@aws/language-server-runtimes/server-interface/server'
import { QCodeReview } from './qCodeReview'
import { ChatTriggerType } from '@amzn/codewhisperer-streaming'

export class QFindingCritic {
    private readonly logging: Features['logging']
    private readonly workspace: Features['workspace']
    private readonly lsp: Features['lsp']

    constructor(features: Pick<Features, 'workspace' | 'logging' | 'lsp'> & Partial<Features>) {
        this.logging = features.logging
        this.workspace = features.workspace
        this.lsp = features.lsp
    }

    static readonly toolName = 'qFindingCritic'

    static readonly toolDescription = [
        'A tool to critic and validate findings generated by only Q Code Review tool',
        '',
        '## Tool Description',
        'Analyze the provided code review findings from Q Code Review tool and perform a thorough validation to:',
        '1. Identify false positives in the findings',
        '2. Re-evaluate and adjust severity ratings where appropriate',
        '3. Identify potential issues missed by the Q Code Review tool',
        '4. Generate a comprehensive report in the same format as the original findings',
    ].join('\n')

    static readonly inputSchema = {
        type: <const>'object',
        properties: {
            // artifacts: {
            //     type: <const> 'array',
            //     description: 'Array of items containing file content which were code reviewed (e.g. ["content of file at path - path/to/file.py"])',
            //     items: {
            //         type: <const> 'string',
            //         description: 'Array item containing file content which were code reviewed (e.g. "content of file at path - path/to/file.py")',
            //     }
            // },
            findings: {
                type: <const>'string',
                description: 'JSON string of findings generated by Q Code Review tool',
            },
        },
        required: ['findings'] as const,
    }

    // amazonq-ignore-next-line
    private static readonly prompt = [
        '# Objective',
        'Critic and validate findings generated by Q Code Review tool',
        '',
        '## Description',
        'Analyze the provided findings from Q Code Review and perform a thorough validation to:',
        '1. Identify false positives in the findings',
        '2. Re-evaluate and adjust severity ratings where appropriate',
        '3. Identify potential issues missed by the Q Code Review tool',
        '4. Generate a comprehensive report in the same format as the original findings',
        '',
        '## Input Format',
        // '- artifacts - File content of code reviewed',
        '- findings - Original findings from the Q Code Review tool converted to JSON string',
        '',
        '## Instructions',
        '',
        '### Step 1: Analyze the Source Code',
        '- Carefully examine the provided source code',
        '- Understand the context, purpose, and functionality of the code',
        '- Identify potential security vulnerabilities, code quality issues, and best practice violations',
        '',
        '### Step 2: Review Q Code Review tool Findings',
        'For each finding generate by Q Code Review tool:',
        '- Verify if the finding is a true positive by examining the code context',
        '- Assess if the severity rating is appropriate based on:',
        '  * Potential impact of the issue',
        '  * Likelihood of exploitation',
        '  * Context of the application',
        '  * Industry standard severity classifications',
        '',
        '### Step 3: Identify False Positives',
        'For each false positive:',
        '- Explain why the finding is a false positive',
        '- Provide evidence from the code that contradicts the finding',
        '- Document the reasoning for dismissal',
        '',
        '### Step 4: Re-rank Severity Levels',
        'For findings with incorrect severity:',
        '- Propose a new severity rating (Critical, High, Medium, Low)',
        '- Justify the change with specific reasoning',
        '- Reference industry standards where applicable (OWASP, CWE, etc.)',
        '',
        '### Step 5: Identify Missing Findings',
        '- Look for additional issues not detected by the Q Code Review tool',
        '- Focus on:',
        '  * Security vulnerabilities',
        '  * Performance issues',
        '  * Maintainability concerns',
        '  * Edge cases',
        '  * Logical errors',
        '  * Additional best practice violations',
        ' ',
        '### Step 6: Generate Comprehensive Report',
        'Generate findings in the same format as the original tool output:',
        '```json',
        '{',
        '  "filePath": "path/to/file.java",',
        '  "startLine": 123,',
        '  "endLine": 125,',
        '  "title": "Issue Title (e.g., CWE-XXX - Description)",',
        '  "description": {',
        '    "text": "Detailed description of the issue",',
        '    "markdown": "Markdown formatted description"',
        '  },',
        '  "findingId": "unique-id",',
        '  "relatedVulnerabilities": ["CWE-XXX"],',
        '  "severity": "Critical|High|Medium|Low",',
        '  "remediation": {',
        '    "recommendation": {',
        '      "text": "Detailed recommendation for fixing the issue",',
        '      "url": "https://docs.example.com/remediation-guide"',
        '    },',
        '  }',
        '}',
        '```',
        '',
        '## Evaluation Criteria',
        'Your analysis will be evaluated on:',
        '1. Accuracy in identifying false positives',
        '2. Correctness of severity adjustments',
        '3. Thoroughness in identifying missed issues',
        '4. Quality and actionability of remediation recommendations',
        '5. Adherence to the required output format',
        '',
        '## Example',
        "For a finding about SQL injection that's correctly identified but with an incorrect severity:",
        '',
        'Original finding:',
        '```json',
        '{',
        '  "severity": "Medium",',
        '  "title": "CWE-89 - SQL injection",',
        '  "description": {"text": "User input directly used in SQL query"}',
        '}',
        '```',
        '',
        'Your adjusted finding:',
        '```json',
        '{',
        '  "severity": "High",',
        '  "title": "CWE-89 - SQL injection",',
        '  "description": {"text": "User input directly used in SQL query"},',
        '  "remediation": {',
        '    "recommendation": {',
        '      "text": "Severity increased from Medium to High because the injection allows full database access with no ',
        'mitigating controls present."',
        '    }',
        '  }',
        '}',
        '```',
    ].join('\n')

    private static readonly zInputSchema = z.object({
        artifacts: z.array(z.string()).optional(),
        findings: z.string(),
    })

    public async execute(input: any, context: any) {
        this.logging.info(`Executing ${QFindingCritic.toolName}: ${JSON.stringify(input)}`)
        // Step 0: Validate input
        // Get the Q streaming client from the context
        const qStreamingClient = context.qStreamingClient as StreamingClientServiceToken
        if (!qStreamingClient) {
            throw new Error('Q streaming client not available')
        }
        // Parse input
        const validatedInput = QFindingCritic.zInputSchema.parse(input)
        this.logging.info(`Q finding critic input: ${JSON.stringify(validatedInput)}`)

        // Call LLM
        // const qStreamingResponse = await qStreamingClient.sendMessage({
        //     conversationState: {
        //         conversationId: "RandomUUID",
        //         currentMessage: {
        //             userInputMessage: {
        //                 content: JSON.stringify({
        //                     prompt: QFindingCritic.prompt,
        //                     artifacts: validatedInput.artifacts,
        //                     findings: validatedInput.findings
        //                 })
        //             }
        //         },
        //         chatTriggerType: ChatTriggerType.MANUAL
        //     }
        // });

        return {
            result: {
                prompt: QFindingCritic.prompt,
            },
        }
    }
}
